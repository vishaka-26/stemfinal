{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting opencv-contrib-python\n",
      "  Downloading opencv_contrib_python-4.5.1.48-cp38-cp38-macosx_10_13_x86_64.whl (51.3 MB)\n",
      "\u001b[K     |████████████████████████████████| 51.3 MB 91 kB/s  eta 0:00:01     |████████████████████▊           | 33.1 MB 5.1 MB/s eta 0:00:04     |█████████████████████▎          | 34.0 MB 5.1 MB/s eta 0:00:04\n",
      "\u001b[?25hRequirement already satisfied: numpy>=1.17.3 in /opt/anaconda3/lib/python3.8/site-packages (from opencv-contrib-python) (1.18.5)\n",
      "Installing collected packages: opencv-contrib-python\n",
      "Successfully installed opencv-contrib-python-4.5.1.48\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install opencv-contrib-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image, ImageOps\n",
    "import cv2 as cv2\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from os import listdir\n",
    "from os.path import isfile, join\n",
    "folderpath= 'Untitled Folder 3/'\n",
    "images = [f for f in listdir(folderpath)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "max_w = 0\n",
    "max_h = 0\n",
    "im=[]\n",
    "y=0\n",
    "for i in images:\n",
    "    im.append( np.array(Image.open('Untitled Folder 3/'+i)))\n",
    "    \n",
    "    if(im[y].shape[0]>max_h):\n",
    "        max_h = im[y].shape[0]\n",
    "    \n",
    "    if(im[y].shape[1]>max_w):\n",
    "        max_w = im[y].shape[1]\n",
    "    y+=1\n",
    "\n",
    "\n",
    "blank= np.array(Image.new(mode = \"RGB\", size = (max_w, max_h),color = (0, 0, 0)))\n",
    "Image.fromarray(blank)\n",
    "\n",
    "finalimages= []\n",
    "y=0\n",
    "for image in im:\n",
    "    blank= np.array(Image.new(mode = \"RGB\", size = (max_w, max_h),color = (0, 0, 0)))\n",
    "    image_h = image.shape[0]\n",
    "    image_w = image.shape[1]\n",
    "    h_Adjust=max_h-image.shape[0]\n",
    "    h_Adjust= int(h_Adjust/2)\n",
    "    \n",
    "    \n",
    "    w_Adjust= max_w-image.shape[1]\n",
    "    w_Adjust= int(w_Adjust/2)\n",
    "    \n",
    "    \n",
    "    blank[h_Adjust:h_Adjust+image.shape[0],w_Adjust:w_Adjust+image.shape[1]]= image\n",
    "    blank[0:h_Adjust,w_Adjust:w_Adjust+image.shape[1]]= cv2.flip(image,0)[image.shape[0]-(h_Adjust):image.shape[0],:]\n",
    "    blank[image.shape[0]+h_Adjust:image.shape[0]+(h_Adjust*2),w_Adjust:w_Adjust+image.shape[1]]= cv2.flip(image,0)[h_Adjust:(h_Adjust*2),:]\n",
    "    blank[:,0:w_Adjust]= cv2.flip(blank,1)[:,image.shape[1]:w_Adjust+image.shape[1]]\n",
    "    blank[:,w_Adjust+image.shape[1]:(w_Adjust*2)+image.shape[1]]= cv2.flip(blank,1)[:,w_Adjust:w_Adjust*2]\n",
    "    \n",
    "    finalimages.append(blank)\n",
    "    y+=1\n",
    "i=1\n",
    "for img in finalimages:\n",
    "    data=Image.fromarray(img)\n",
    "    data.save( str(i) +'.jpg', 'JPEG')\n",
    "    i+=1\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
